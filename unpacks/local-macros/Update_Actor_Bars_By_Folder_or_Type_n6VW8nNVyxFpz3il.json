{
  "name": "Update Actor Bars By Folder or Type",
  "type": "script",
  "scope": "global",
  "author": "v0RvORcwGexWLCjc",
  "img": "Assets/icons/game-icons-net/blackbackground/life-bar.svg",
  "command": "class ValidatedDialog extends Dialog {\n    submit(button, event) {\n        if (button.label === 'Submit' && !this.element[0].querySelector('#groupType').value) {\n            return ui.notifications.warn('Select a grouping!');\n        }\n        super.submit(button, event);\n    }\n}\nfunction localize(key) {\n     return game.i18n.localize(key);\n}\nfunction generateOptions(filter = (f) => true) {\n    let out = ``;\n    const folders = game.folders.filter(f => f.type === 'Actor')\n    if (folders.length) {\n        out += `<optgroup label=\"Folders\">`;\n        for (const f of folders) {\n            out += `<option value=\"${f.id}\">${f.name}</option>`;\n        }\n        out += `</optgroup>`;\n    }\n\n    out += `<optgroup label=\"Other Groupings\">`;\n    for (const [type,label] of Object.entries(CONFIG.Actor.typeLabels)) {\n        out += `<option value=\"${type}\">Type: ${localize(label)}</option>`   \n    }    \n    out += `</optgroup>`\n    return out;\n}\nfunction generateVisibilityTypes(filter = (f) => true) {\n    let out = ``;\n    for (const mode of Object.keys(CONST.TOKEN_DISPLAY_MODES)) {\n        out += `<option value=\"${CONST.TOKEN_DISPLAY_MODES[mode]}\">${localize(`TOKEN.DISPLAY_${mode}`)}</option>`;\n    }\n    return out;\n}\nconst form = `\n<form>\n    <div class=\"form-group\">\n        <label for=\"groupType\">Select Grouping:&nbsp;</label>\n        <select id=\"groupType\" name=\"groupType\">\n            <option id=\"defaultoption\" value=\"\" selected></option>\n            ${generateOptions()}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"nametype\">Nameplate Visibility:&nbsp;</label>\n        <select id=\"nametype\" name=\"nametype\">\n            ${generateVisibilityTypes()}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"barstype\">Bars Visibility:&nbsp;</label>\n        <select id=\"barstype\" name=\"barstype\">\n            ${generateVisibilityTypes()}\n        </select>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"prototokens\">Apply to Prototype Tokens:&nbsp;</label>\n        <input type=\"checkbox\" name=\"prototokens\" id=\"prototokens\" />\n    </div>\n    <div class=\"form-group\">\n        <label for=\"alltokens\">Apply to All Existing Tokens (every scene):&nbsp;</label>\n        <input type=\"checkbox\" name=\"alltokens\" id=\"alltokens\" />\n    </div>                       \n</form> \n`;\nfunction pickActors(html) {\n    const formElement = html[0].querySelector('form');\n    const formData = new FormDataExtended(formElement);\n    return formData.toObject();        \n}\nconst dData = {\n    title: \"Select Actors & Visibility Types\",\n    content: form,\n    // render: renderCallback,\n    buttons: {      \n        submit: { label: \"Submit\", callback: pickActors, icon: '<i class=\"fas fa-check\"></i>' },            \n        cancel: { label: \"Cancel\", icon: '<i class=\"fas fa-times\"></i>' }\n    },\n    default: 'submit',\n} \nconst dOpts = {\n    height: \"auto\",\n    width: \"auto\",\n}\nconst response = await ValidatedDialog.wait(dData, dOpts);\nif (response === 'cancel') return;\nlet actors = [];\nif (Object.keys(CONFIG.Actor.typeLabels).includes(response.groupType)) {\n    actors = game.actors.filter(a => a.type === response.groupType)\n} else {\n    actors = game.folders.filter(f => f.id === response.groupType).pop().contents;\n}\ncwarn(actors)\nfor (const a of actors) {\n    if (response.prototokens) {\n        a.update({\n            \"prototypeToken.displayName\": response.nametype,\n            \"prototypeToken.displayBars\": response.barstype\n        });\n    }\n    if (response.alltokens) {\n        for (const scene of game.scenes) {            \n            for (const token of scene.tokens) {\n                if (token.actorId === a.id) {                    \n                    token.update({\n                        \"displayName\": response.nametype,\n                        \"displayBars\": response.barstype\n                    });\n                }\n            }\n        }\n    }    \n}",
  "flags": {
    "advanced-macros": {
      "runAsGM": false,
      "runForSpecificUser": ""
    },
    "cf": null,
    "core": {}
  },
  "_stats": {
    "systemId": "pf2e",
    "systemVersion": "5.10.5",
    "coreVersion": "11.315",
    "createdTime": 1679773769715,
    "modifiedTime": 1702343866185,
    "lastModifiedBy": "v0RvORcwGexWLCjc"
  },
  "_id": "n6VW8nNVyxFpz3il",
  "folder": "MUrlWbVP9uj79bSv",
  "sort": 2400000,
  "ownership": {
    "default": 0,
    "holNdNHqtCzAbMAV": 3,
    "717Xeq3czH96acPF": 3,
    "ZMxdSpEKesYc7gvn": 3
  },
  "_key": "!macros!n6VW8nNVyxFpz3il"
}
