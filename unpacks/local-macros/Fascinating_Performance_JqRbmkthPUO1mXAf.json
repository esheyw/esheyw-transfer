{
  "name": "Fascinating Performance",
  "type": "script",
  "scope": "global",
  "_id": "JqRbmkthPUO1mXAf",
  "author": "v0RvORcwGexWLCjc",
  "img": "icons/magic/control/hypnosis-mesmerism-eye.webp",
  "command": "//Check for exactly one selected token\nif (canvas.tokens.controlled.length > 1) {\n  return ui.notifications.error(\"Please select only a single token.\");\n}\nconst token = canvas.tokens.controlled[0] ?? game.user.character?.getActiveTokens()[0];\nif (!token) {    \n  return ui.notifications.error(\"Please select exactly one token or assign yourself a character.\");\n} \nconst actor = token.actor;\n\nconst feat = actor.items.find(f=>f.slug==='fascinating-performance')\nif (!feat) {\n  return ui.notifications.error(\"Selected actor must have the Fascinating Performance feat.\");\n}\nconst {targets} = game.user;\nif (!targets.size) {\n  return ui.notifications.error(\"Must target at least one token\");\n}\n\nconst prfRank = actor.skills.performance.rank;\nswitch(prfRank) {\n  case 0:\n    return ui.notifications.error(\"Must be at least Trained in Performance to use, or even have taken, Fascinating Performance.\");\n  case 1:\n    if (targets.size > 1) return ui.notifications.error(\"You are only Trained in performance, so are limited to a single target.\");\n    break;\n  case 2:\n    if (targets.size > 4) return ui.notifications.error(\"You are only Expert in performance, so are limited to 4 targets.\");\n    break;\n  case 3:\n    if (targets.size > 10) return ui.notifications.error(\"You are only Master in performance, so are limited to 10 targets.\");\n    break;\n  case 4:\n    break;\n  default:\n    return ui.notifications.error(\"You broke something\");\n}\nlet singleTarget = false;\nif (targets.size === 1) singleTarget = true;\n\nHandlebars.registerHelper(\"dosTable\", (value, property=\"label\") => {\n  const dosTable = [\n    {\n      color: \"var(--degree-critical-failure, rgb(255, 0, 0))\",\n      label: \"Critical Failure\"\n    },\n    {\n      color: \"var(--degree-failure, rgb(255, 69, 0))\",\n      label: \"Failure\"\n    },\n    {\n      color: \"var(--degree-success, rgb(0, 0, 255))\",\n      label: \"Success\"\n    },\n    {\n      color: \"var(--degree-critical-success, rgb(0, 128, 0))\",\n      label: \"Critical Success\"\n    }\n  ];\n  if (![\"color\",\"label\"].includes(property)) property = \"label\";\n  return getProperty(dosTable[value], property);\n});\n\nconst contentTemplate = `\n<div class=\"pf2e chat-card action-card\">\n{{#if showPanache}}\n  <section class=\"roll-note\">\n    <strong>Battledancer</strong>\n    You gain @UUID[Compendium.pf2e.feat-effects.Item.uBJsxCzNhje8m8jj]\n  </section>\n{{/if}}\n{{#if showFascinated}}\n  <section class=\"roll-note\">\n    Noted targets become @UUID[Compendium.pf2e.conditionitems.Item.AdPVz7rbaVSRxHFg] for 1 round\n  </section>\n{{/if}}\n\n{{#each targets as |target|}}\n  {{log target}}\n  <div data-actor-id=\"{{target.id}}\">\n    {{target.name}}: <span style='color: {{dosTable target.dos \"color\"}};'>{{dosTable target.dos \"label\"}}</span><br />\n    DC: {{target.dc}} Total: {{target.rollTotal}} Fascinated: {{#if target.fascinated}}Yes{{else}}No{{/if}}\n  </div>\n{{/each}}\n\n</div>\n`;\nconst flavorTemplate = `\n<h4 class=\"action\">\n  <span class=\"action-glyph\">1</span>\n  Fascinating Performance: <i class=\"fa-solid fa-dice-d20\"></i><span {{#unless (isNullish d20dos)}}style=\"color: {{dosTable d20dos \"color\"}}\"{{/unless}}>{{d20}}</span>\n</h4>\n`;\nconst compiledContentTemplate = Handlebars.compile(contentTemplate);\nconst compiledFlavorTemplate = Handlebars.compile(flavorTemplate);\n\n//super janky hack to force the same d20 roll for all targets\nconst d20 = (await (new Roll('1d20')).evaluate()).total;\n\nconst ruleToAdd = \n{\n  key: \"SubstituteRoll\",\n  selector: \"performance\",\n  value: d20,\n  required: true\n}\nconst originalRules = deepClone(feat.system.rules);\nconst rules = deepClone(originalRules)\nrules.push(ruleToAdd);\nawait feat.update({\n  \"system.rules\": rules\n});\n\nconst isBattledancer = !!(actor.items.find(i=>i.slug==='battledancer') ?? false);\nconst isFocusedFascinator = !!(actor.items.find(i=>i.slug==='focused-fascination') ?? false);\n\nconst templateData = {\n  showPanache: false,\n  fascinated: false,\n  targets: [],\n  d20,\n  d20dos: d20 === 1 ? 0 : d20 === 20 ? 3 : null,\n};\ntry {\n  for (const targetToken of targets) {\n    const target = targetToken.actor;\n    const immunityEffect = target.items.find(i => \n         i.name.toLowerCase().includes('immun') \n      && i.name.toLowerCase().includes('fascinating performance')\n    );\n    if (immunityEffect) {\n      ui.notifications.warn(`Target \"${targetToken.name}\" is immune to being fascinated.`);\n      continue;\n    }\n    const extraRollOptions = [];\n    if (targetToken.inCombat) {\n      extraRollOptions.push(\"incapacitation\");\n    }\n    const dc = target.saves.will.dc.value\n    const perfRoll = await actor.skills.performance.roll({\n      async: true,\n      createMessage: false,\n      dc,\n      item: feat,\n      target,\n      extraRollOptions\n    });\n  \n    const dos = perfRoll.degreeOfSuccess;\n    if (dos > 1 && isBattledancer) {\n      templateData.showPanache = true;\n    }\n    const inCombat = (targetToken.inCombat && game.combat?.started);\n    let thisTargetFascinated = false;\n    if (dos === 3 || //either a crit success\n         (dos === 2 && ((isFocusedFascinator && singleTarget) || !inCombat)) // or a regular success when that counts\n       ) {\n      templateData.showFascinated = true;\n      thisTargetFascinated = true;   \n    }\n    templateData.targets.push({\n      name: targetToken.name,\n      rollTotal: perfRoll.total,\n      inCombat: targetToken.inCombat,\n      dos,\n      dc,\n      id: target.id,\n      fascinated: thisTargetFascinated,\n    })\n  }\n  \n  \n  await ChatMessage.create({\n    flavor: compiledFlavorTemplate(templateData),\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: token}),\n    content: compiledContentTemplate(templateData)\n  });\n} finally {\n  await feat.update({\n    \"system.rules\": originalRules\n  });\n}",
  "folder": "MUrlWbVP9uj79bSv",
  "flags": {
    "core": {}
  },
  "_stats": {
    "systemId": "pf2e",
    "systemVersion": "5.10.5",
    "coreVersion": "11.315",
    "createdTime": 1698625247867,
    "modifiedTime": 1702343866185,
    "lastModifiedBy": "v0RvORcwGexWLCjc"
  },
  "sort": 0,
  "ownership": {
    "default": 0,
    "v0RvORcwGexWLCjc": 3
  },
  "_key": "!macros!JqRbmkthPUO1mXAf"
}
