{
  "name": "Learn a Spell",
  "type": "script",
  "scope": "global",
  "author": "v0RvORcwGexWLCjc",
  "img": "Assets/icons/game-icons-net/whitebackground/classical-knowledge.svg",
  "command": "if (canvas.tokens.controlled.length > 1) return ui.notifications.error(\"Please select only a single token.\");\nconst token = canvas.tokens.controlled[0] ?? game.user.character?.getActiveTokens()[0];\nif (!token) return ui.notifications.warn(\"Please select exactly one token or assign yourself a character.\");\nconst actor = token.actor;\n\nconst LEVELS = [\n  {cost:2,dc:15},\n  {cost:6,dc:18},\n  {cost:16,dc:20},\n  {cost:36,dc:23},\n  {cost:70,dc:26},\n  {cost:140,dc:28},\n  {cost:300,dc:31},\n  {cost:650,dc:34},\n  {cost:1500,dc:36},\n  {cost:7000,dc:41},\n]\nconst style = `\n<style>\n.learn-a-spell {\n  height: auto !important;\n}\n.learn-a-spell .drop-zone {\n  width: 200px;\n  height: 50px;\n  text-aligh: center;\n}\n.learn-a-spell .spell-info-container {\n  display: none;\n}\n.learn-a-spell .spell-info-container img {\n  width: 50px;\n  height: 50px;\n}\n.learn-a-spell .spell-info-container button {\n  \n}\n.spellcastingEntryContainer {\n  transition: all 400ms ease-in-out;\n  height: auto;\n}\n.hide {\n  height: 0;\n  transition: all 0s ease-in-out;\n}\n</style>`;\nconst template = `\n<form>\n    <div class=\"form-group\">        \n        <div class=\"drop-zone\">\n            <i class=\"fa-solid fa-fw fa-info-circle\" data-tooltip=\"Drop a spell item or scroll here.\"></i>\n            <span class=\"drop-text\">Drop Here</span>\n        </div>\n        <fieldset class=\"spell-info-container\">\n          <legend>Name</legend>\n          <img src=\"systems/pf2e/icons/default-icons/spell.svg\" /><button type=\"button\" id=\"reselect\">Reselect</button><br />\n          <label for=\"learn-dc\">DC:</label><input type=\"text\" name=\"learn-dc\" id=\"learn-dc\" value=\"15\"><br />\n          <label for=\"spell-name\">Cost:</label><input type=\"text\" name=\"learn-cost\" id=\"learn-cost\" value=\"2gp\">\n          <label for=\"spellcastingEntryToggle\">Add to spellcasting entry?</label>\n          <input name=\"spellcastingEntryToggle\" id=\"spellcastingEntryToggle\" type=\"checkbox\">\n          <div class=\"spellcastingEntryContainer hide\">\n            <label for=\"spellcastingEntrySelect\">\n            <select id=\"spellcastingEntrySelect\" name=\"spellcastingEntrySelect\">\n            {{#each spellcastingEntries as |entry|}}\n              <option value=\"{{entry.id}}\">{{entry.name}}</option>\n            {{/each}}\n            </select>\n          </div>          \n        </fieldset>\n    </div>                \n</form> \n`;\nconst templateData = {\n  spellcastingEntries: actor.itemTypes.spellcastingEntry\n  .filter(e => e.system.prepared.value === 'prepared')\n  .sort((a,b) => a.spells.size > b.spells.size ? -1 : a.spells.size < b.spells.size ? 1 : 0)\n  .map(e => {return {\n    id: e._id,\n    name: e.name\n  }}),\n};\nconst form = (Handlebars.compile(template))(templateData);\n\nasync function dropCallback(event) {\n  const thisApp = ui.windows[event.target.closest('.dialog').dataset.appid]\n  const dropdata = JSON.parse(event.dataTransfer?.getData(\"text/plain\"));\n  const dropTextSpan = this.querySelector('.drop-text');\n  if (!dropdata || dropdata.type !== 'Item') {\n    dropTextSpan.innerHTML = 'Invalid spell or spell-containing object!';\n    return;\n  }\n  const spell = await fromUuid(dropdata.uuid);\n  if (!spell) {\n    return ui.notifications.error(`Couldn't retrive item with UUID ${dropdata.uuid}`);\n  }\n  const dropZone = this;\n  const spellInfo = this.parentElement.parentElement.querySelector('.spell-info-container')\n  const spellData = (spell.type === 'consumable' && spell.system?.spell) ? spell.system.spell : spell.toObject();\n  console.warn(spellData)\n  const {cost, dc} = LEVELS[spellData.system.level.value - 1];\n  spellInfo.querySelector('img').src = spellData.img;\n  spellInfo.querySelector('legend').innerHTML = `${spellData.name} (Rank ${spellData.system.level.value})`;\n  spellInfo.querySelector('#learn-dc').value = dc;\n  spellInfo.querySelector('#learn-cost').value = `${cost}gp`;\n  spellInfo.style.display = 'block';\n  dropZone.style.display = 'none';\n  // thisApp.setPosition();\n  console.warn(thisApp);\n}\nfunction renderCallback(html) {\n  const dropZone = html[0].querySelector('div.drop-zone');\n  dropZone.addEventListener('drop', dropCallback);\n  \n  const reselect = html[0].querySelector('#reselect');\n  reselect.addEventListener('click', reselectCallback);\n  \n  const spellcastingEntryToggle = html[0].querySelector('input#spellcastingEntryToggle');\n  spellcastingEntryToggle.addEventListener('change', (event) => {\n    console.warn(event.currentTarget.parentElement.querySelector('.spellcastingEntryContainer').classList.toggle('hide'))//.classList.toggle('hide');\n  });\n  \n  const submit = html[2].querySelector('button.submit');\n  submit.disabled = true;\n}\nfunction reselectCallback(event) {\n  const form = this.closest('form');\n  form.querySelector('.spell-info-container').style.display = 'none';\n  form.querySelector('.drop-zone').style.display = 'block';\n}\nconst dialogData = {\n  title: `Learn a Spell`,\n  content: style + form,\n  render: renderCallback,\n  buttons: {      \n    submit: { \n      label: \"Submit\", \n      // callback: effectcallback, \n      icon: '<i class=\"fas fa-check\"></i>' \n    },            \n    cancel: { \n      label: \"Cancel\", \n      icon: '<i class=\"fas fa-times\"></i>' \n    }\n  },\n  default: 'submit',\n}    \nconst dialogOptions = {\n  classes: [\"learn-a-spell\"],\n  // jQuery:false;\n}\nconst response = await Dialog.wait(dialogData, dialogOptions);\nconsole.warn(response);",
  "folder": "MUrlWbVP9uj79bSv",
  "ownership": {
    "default": 0,
    "v0RvORcwGexWLCjc": 3
  },
  "flags": {
    "core": {}
  },
  "_stats": {
    "systemId": "pf2e",
    "systemVersion": "5.10.5",
    "coreVersion": "11.315",
    "createdTime": 1700364756674,
    "modifiedTime": 1702343866185,
    "lastModifiedBy": "v0RvORcwGexWLCjc"
  },
  "_id": "9AuXZvd9sqM8txCc",
  "sort": 100000,
  "_key": "!macros!9AuXZvd9sqM8txCc"
}
