{
  "name": "Post Roll Button (webster macro)",
  "type": "script",
  "scope": "global",
  "author": "v0RvORcwGexWLCjc",
  "img": "icons/svg/dice-target.svg",
  "command": "const showPostPf2eRollButtonDialog = () => {\n  const allLoresThatPcsHave = game.actors.filter(a => a.hasPlayerOwner).flatMap(a =>\n    Object.values(a.system?.skills || {}).filter(s => s.lore),\n  )\n  const allCheckAndSaveTypes = [FLAT, PERCEPTION, ...SAVES_LIST, ...SKILLS_LIST]\n  let template = `\n<div>\n    <div class=\"form-group\">\n        <label>Roll Type:</label>\n        <select id=\"roll-type\" >`\n  template += `<option value=\"${FLAT.shortform}\">${FLAT.label}</option>`\n  template += `<option value=\"${PERCEPTION.shortform}\">${PERCEPTION.label}</option>`\n  template += `<option disabled>Saves:</option>`\n  for (const option of SAVES_LIST) {\n    template += `<option value=\"${option.shortform}\">${option.label}</option>`\n  }\n  template += `<option disabled>Skills:</option>`\n  for (const option of SKILLS_LIST) {\n    template += `<option value=\"${option.shortform}\">${option.label}</option>`\n  }\n  template += `<option disabled>Lore:</option>`\n  for (const lore of allLoresThatPcsHave) {\n    template += `<option value=\"${lore.shortform}\">📖 ${lore.label}</option>`\n  }\n  template += `</select>\n        <label>Action?:</label>\n        <select id=\"roll-action\" disabled>`\n  template += `<option value=\"no-action\" data-idx=\"-1\">(No skill action selected)</option>`\n  for (const sa of SKILL_ACTIONS) {\n    template += `<option \n      value=\"${sa.shortform}\" \n      data-idx=\"${sa.idx}\"\n      >${sa.label}</option>`\n  }\n  template += `</select>\n        <br/>\n        Name: \n        <input id=\"roll-name\" style=\"width: auto\" type=\"text\" value='Flat check!' />\n        <br/>\n        Static DC:\n        <input style=\"width: 24px\" id=\"dc\" type=\"number\" />\n        <span id=\"static-dc-options\">\n          <button style=\"width: fit-content; line-height: normal\">5</button>\n          <button style=\"width: fit-content; line-height: normal\">10</button>\n          <button style=\"width: fit-content; line-height: normal\">15</button>\n          <button style=\"width: fit-content; line-height: normal\">20</button>\n          <button style=\"width: fit-content; line-height: normal\">30</button>\n          <button style=\"width: fit-content; line-height: normal\">40</button>\n        </span>\n        <br/>\n        Or level-based: \n        <input style=\"width: 24px;\" id=\"level-based-dc\" type=\"number\" />\n        <select id=\"adjustment\">\n          <option value=-10>(-10) Incredibly Easy</option>\n          <option value=-5>(-5) Very Easy</option>\n          <option value=-2>(-2) Easy</option>\n          <option selected value=0>(+0) No Adjustment</option>\n          <option value=2>(+2) Hard</option>\n          <option value=5>(+5) Very Hard</option>\n          <option value=10>(+10) Incredibly Hard</option>\n        </select>\n        <br/>\n        <label>Reveal DC?</label>\n        <input style=\"vertical-align: middle;\" id=\"reveal-dc\" type=\"checkbox\"/>\n        <label>Secret?</label>\n        <input style=\"vertical-align: middle;\" id=\"is-secret\" type=\"checkbox\"/>\n        <input id=\"traits\" type=\"text\" placeholder='Extra Traits? (poison,fire,etc)' />\n    </div>\n</div>`\n\n  new Dialog({\n    title: 'Post quick inline roll button in chat',\n    content: template,\n    buttons: {\n      ok: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: 'OK',\n        callback: async (html) => {\n          const rollType = html.find('#roll-type')[0].value\n          const rollSkillActionStr = html.find('#roll-action')[0].value\n          const rollSkillActionIdx = parseInt(html.find('#roll-action')[0].selectedOptions[0].dataset['idx'])\n          const rollSkillAction = rollSkillActionStr === 'no-action' ? undefined : SKILL_ACTIONS[rollSkillActionIdx]\n          const rollName = html.find('#roll-name')[0].value\n          const adjustment = parseInt(html.find('#adjustment')[0].value)\n          let dcInput = html.find('#dc')[0].value\n          const dc = (dcInput.toLowerCase().startsWith('l'))\n            ? LEVEL_BASED_DC[parseInt(dcInput.substring(1)) + 1]\n            : parseInt(dcInput)\n          const revealDC = html.find('#reveal-dc')[0].checked\n          const isSecret = html.find('#is-secret')[0].checked\n          const traits = html.find('#traits')[0].value + (isSecret ? ',secret' : '')\n          postPf2eRollButton(rollName, rollType, rollSkillAction, dc + adjustment, traits,\n            revealDC)\n        },\n      },\n      cancel: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: 'Cancel',\n        callback: async () => {\n        },\n      },\n    },\n    default: 'ok',\n  }, { width: 450 }).render(true)\n\n  Hooks.once('renderDialog', (dialog, $html) => {\n    // roll type, will update roll actions\n    $html.find('#roll-type').on('change', (e) => {\n      const rollTypeShortform = e.target.value\n      $html.find('#roll-action').prop('hidden', true)\n      $html.find('#roll-action').prop('disabled', true)\n      for (const checkOrSaveOrLore of [...allCheckAndSaveTypes, ...allLoresThatPcsHave]) {\n        if (checkOrSaveOrLore.shortform === rollTypeShortform) {\n          // hide unrelated roll actions\n          $html.find('#roll-action').prop('hidden', false)\n          $html.find('#roll-action option').each((i, e) => {\n            if (e.value === 'no-action') {\n              return  // always enabled\n            }\n            const skillAction = SKILL_ACTIONS.find(sa => sa.idx === e.dataset['idx'])\n            if (skillAction.skill === checkOrSaveOrLore.shortform) {\n              $html.find('#roll-action').prop('disabled', false)\n              $(e).prop('hidden', false)\n            } else {\n              $(e).prop('hidden', true)\n            }\n            // if lore, do enable \"recall knowledge\" skill action\n            if (skillAction.skill === 'SPECIAL_LORE') {\n              const isLoreSelected = allLoresThatPcsHave.some(l => l.shortform === rollTypeShortform)\n              if (isLoreSelected) {\n                $html.find('#roll-action').prop('disabled', false)\n                $(e).prop('hidden', false)\n              }\n            }\n          })\n          // deselect current skill action\n          $html.find('#roll-action').val('no-action')\n          break\n        }\n      }\n    })\n    // roll type, will update roll name to match (if it's automatic)\n    $html.find('#roll-type').on('change', (e) => {\n      const prevRollName = $html.find('#roll-name').val()\n      if (!prevRollName.endsWith('!')) return\n      const rollTypeShortform = e.target.value\n      const checkOrSaveText = SAVES_LIST.some(s => s.shortform === rollTypeShortform) ? ' save' : ' check'\n      let rollTypeCapitalized = rollTypeShortform.capitalize()\n      for (const option of allCheckAndSaveTypes) {\n        if (option.shortform === rollTypeShortform) {\n          // drop emoji part\n          rollTypeCapitalized = option.label.substring(option.label.indexOf(' '))\n          break\n        }\n      }\n      for (const lore of allLoresThatPcsHave) {\n        if (lore.shortform === rollTypeShortform) {\n          rollTypeCapitalized = lore.label\n          break\n        }\n      }\n      const newName = rollTypeCapitalized + checkOrSaveText + '!'\n      $html.find('#roll-name').val(newName)\n    })\n    // roll action, will update roll name to match (if it's automatic)\n    $html.find('#roll-action').on('change', (e) => {\n      const prevRollName = $html.find('#roll-name').val()\n      if (!prevRollName.endsWith('!')) return\n      const selectedSkillActionElement = $html.find('#roll-action')[0].selectedOptions[0]\n      if (selectedSkillActionElement.value !== 'no-action') {\n        const selectedSkillAction = SKILL_ACTIONS.find(sa => sa.idx === selectedSkillActionElement.dataset['idx'])\n        // drop emoji part\n        const actionCapitalized = selectedSkillAction.label.substring(selectedSkillAction.label.indexOf(' '))\n        const newName = actionCapitalized + '!'\n        $html.find('#roll-name').val(newName)\n      }\n    })\n    // level-based DC, will update DC\n    $html.find('#level-based-dc').on('input', (e) => {\n      const newLevel = parseInt(e.target.value)\n      const newDc = LEVEL_BASED_DC[newLevel + 1]\n      $html.find('#dc').val(newDc)\n    })\n    // static DC buttons, will update DC and tick reveal DC\n    $html.find('#static-dc-options > button').on('click', (e) => {\n      const newDc = parseInt(e.target.textContent)\n      $html.find('#dc').val(newDc)\n      $html.find('#reveal-dc').prop('checked', true)\n    })\n  })\n}\n\nconst postPf2eRollButton = (rollName, rollType, rollSkillAction, dc, traits, revealDC) => {\n  if (rollSkillAction?.shortform === 'SPECIAL_RECALL_KNOWLEDGE') {\n    rollSkillAction = undefined\n    traits = traits + (traits ? ',' : '') + 'action:recall-knowledge'\n  }\n  const saveOrCheck = SAVES_LIST.some(s => s.shortform === rollType)\n  const rollHeader = `<h2>${rollName}</h2>`\n  const rollTypeText = rollType ? `type:${rollType}` : ''\n  const dcText = dc ? `|dc:${dc}` : ''\n  const revealDcValue = revealDC ? 'all' : game.user.isGM ? 'gm' : 'owner'\n  const showDcText = `|showDC:${revealDcValue}`\n  const isBasicText = saveOrCheck ? '|basic:true' : ''\n  const traitsText = traits ? `|traits:${traits}` : ''\n  const rollNameText = rollName ? `|name:${rollName}` : ''\n\n  let message\n  if (!rollSkillAction) {\n    message = `\n  ${rollHeader}\n  @Check[${(\n      rollTypeText + dcText + rollNameText + showDcText + isBasicText + traitsText\n    )}]\n`\n  } else {\n    // for skill actions I had to use the older version, with <span>\n    message = `\n    ${rollHeader}\n  <span \n  data-pf2-skill='${rollType}'\n  data-pf2-action='${rollSkillAction.shortform}'\n  ${rollSkillAction.variant ? `data-pf2-variant='${rollSkillAction.variant}'` : ``}\n  ${rollSkillAction.actionCountGlyph ? `data-pf2-glyph='${rollSkillAction.actionCountGlyph}'` : ``}\n  data-pf2-show-dc='${revealDcValue}'\n  data-pf2-traits='${traits}'\n  ${dc ? `data-pf2-dc='${dc}'` : ``}\n  >\n  ${rollName} (${rollType.capitalize()})\n  </span>\n  `\n  }\n  const chatData = {\n    user: game.user.id,\n    speaker: { user: game.user },\n    flags: { core: { canPopout: true } },\n    content: message,\n  }\n  ChatMessage.create(chatData, {})\n}\n\nconst showAllPf2eActionButtons = () => {\n  const message = `` +\n    SKILL_ACTIONS.map((sa) => {\n        const { label, shortform, skill, actionCountGlyph, variant } = sa\n        const actionName = shortform\n        // convert camelCase to Capitalized Words\n        const shownName = label.replace(/([A-Z])/g, ' $1').\n          split(' ').\n          map((s) => ['a', 'in'].includes(s) ? s : s.capitalize()).\n          join(' ')\n        return `<span data-pf2-action='${actionName}' data-pf2-glyph=\"${actionCountGlyph}\" data-pf2-show-dc='' data-pf2-variant='${variant}' >\n${shownName} (${skill.capitalize()})\n</span>\n<br>`\n      },\n    ).join('')\n  const chatData = {\n    user: game.user.id,\n    speaker: { alias: 'Common Skill Actions' },\n    content: message,\n    flags: { core: { canPopout: true } },\n    whisper: [game.user.id],\n  }\n  ChatMessage.create(chatData, {})\n}\n\nconst SKILLS_LIST = [\n  { label: '🤸 Acrobatics', shortform: 'acrobatics' },\n  { label: '🔮 Arcana', shortform: 'arcana' },\n  { label: '🤼‍️ Athletics', shortform: 'athletics' },\n  { label: '‍️🔨 Crafting', shortform: 'crafting' },\n  { label: '🎭 Deception', shortform: 'deception' },\n  { label: '🙏 Diplomacy', shortform: 'diplomacy' },\n  { label: '😡 Intimidation', shortform: 'intimidation' },\n  { label: '🩺 Medicine', shortform: 'medicine' },\n  { label: '🌼 Nature', shortform: 'nature' },\n  { label: '🧿 Occultism', shortform: 'occultism' },\n  { label: '🎩 Performance', shortform: 'performance' },\n  { label: '🛐 Religion', shortform: 'religion' },\n  { label: '🏫 Society', shortform: 'society' },\n  { label: '🤫 Stealth', shortform: 'stealth' },\n  { label: '⛺ Survival', shortform: 'survival' },\n  { label: '🔓 Thievery', shortform: 'thievery' },\n]\nconst SAVES_LIST = [\n  { label: '💪 Fortitude', shortform: 'fortitude' },\n  { label: '🦵 Reflex', shortform: 'reflex' },\n  { label: '🧠 Will', shortform: 'will' },\n]\nconst PERCEPTION = { label: '👀 Perception', shortform: 'perception' }\nconst FLAT = { label: '🎲 Flat check', shortform: 'flat' }\n// glyphs are: A D T F R, or 1 2 3 4 5, for: one action, two/double, three/triple, free action, reaction.  '' is Exploration\nconst SKILL_ACTIONS = [\n  { label: '👀 Seek', shortform: 'seek', skill: 'perception', actionCountGlyph: '1' },\n  { label: '👮 Sense Motive', shortform: 'senseMotive', skill: 'perception', actionCountGlyph: '1' },\n  { label: '🤸 Tumble Through', shortform: 'tumbleThrough', skill: 'acrobatics', actionCountGlyph: '1' },\n  { label: '🏂 Balance', shortform: 'balance', skill: 'acrobatics', actionCountGlyph: '1' },\n  { label: '🦅 Maneuver in Flight', shortform: 'maneuverInFlight', skill: 'acrobatics', actionCountGlyph: '1' },\n  { label: '🐀 Squeeze', shortform: 'squeeze', skill: 'acrobatics', actionCountGlyph: '' },\n  { label: '📜 Decipher Writing', shortform: 'decipherWriting', skill: 'arcana', actionCountGlyph: '' },\n  { label: '🧠 Recall Knowledge', shortform: 'SPECIAL_RECALL_KNOWLEDGE', skill: 'arcana', actionCountGlyph: '1' },\n  { label: '🧗 Climb', shortform: 'climb', skill: 'athletics', actionCountGlyph: '1' },\n  { label: '🤺 Disarm', shortform: 'disarm', skill: 'athletics', actionCountGlyph: '1' },\n  { label: '🚪 Force Open', shortform: 'forceOpen', skill: 'athletics', actionCountGlyph: '1' },\n  { label: '✊ Grapple', shortform: 'grapple', skill: 'athletics', actionCountGlyph: '1' },\n  { label: '🫱 Shove', shortform: 'shove', skill: 'athletics', actionCountGlyph: '1' },\n  { label: '🦶 Trip', shortform: 'trip', skill: 'athletics', actionCountGlyph: '1' },\n  { label: '🤾 High Jump', shortform: 'highJump', skill: 'athletics', actionCountGlyph: '2' },\n  { label: '🦘 Long Jump', shortform: 'longJump', skill: 'athletics', actionCountGlyph: '2' },\n  { label: '🏊 Swim', shortform: 'swim', skill: 'athletics', actionCountGlyph: '1' },\n  { label: '🧠 Recall Knowledge', shortform: 'SPECIAL_RECALL_KNOWLEDGE', skill: 'crafting', actionCountGlyph: '1' },\n  {\n    label: '👉 Create a Diversion (S)',\n    shortform: 'createADiversion',\n    skill: 'deception',\n    actionCountGlyph: '1',\n    variant: 'gesture',\n  },\n  {\n    label: '🤭 Create a Diversion (V)',\n    shortform: 'createADiversion',\n    skill: 'deception',\n    actionCountGlyph: '1',\n    variant: 'distracting-words',\n  },\n  { label: '😜 Feint', shortform: 'feint', skill: 'deception', actionCountGlyph: '1' },\n  { label: '🤥 Lie', shortform: 'lie', skill: 'deception', actionCountGlyph: '3' },\n  { label: '💄 Impersonate', shortform: 'impersonate', skill: 'deception', actionCountGlyph: '' },\n  { label: '😎 Bon Mot', shortform: 'bonMot', skill: 'diplomacy', actionCountGlyph: '1' },\n  { label: '🥺 Request', shortform: 'request', skill: 'diplomacy', actionCountGlyph: '1' },\n  { label: '🙋 Make an Impression', shortform: 'makeAnImpression', skill: 'diplomacy', actionCountGlyph: '' },\n  { label: '🕵️ Gather Information', shortform: 'gatherInformation', skill: 'diplomacy', actionCountGlyph: '' },\n  { label: '😡 Demoralize', shortform: 'demoralize', skill: 'intimidation', actionCountGlyph: '1' },\n  { label: '📢 Coerce', shortform: 'coerce', skill: 'intimidation', actionCountGlyph: '' },\n  { label: '🧠 Recall Knowledge', shortform: 'SPECIAL_RECALL_KNOWLEDGE', skill: 'medicine', actionCountGlyph: '1' },\n  { label: '🧠 Recall Knowledge', shortform: 'SPECIAL_RECALL_KNOWLEDGE', skill: 'nature', actionCountGlyph: '1' },\n  { label: '📜 Decipher Writing', shortform: 'decipherWriting', skill: 'occultism', actionCountGlyph: '' },\n  { label: '🧠 Recall Knowledge', shortform: 'SPECIAL_RECALL_KNOWLEDGE', skill: 'occultism', actionCountGlyph: '1' },\n  { label: '📜 Decipher Writing', shortform: 'decipherWriting', skill: 'religion', actionCountGlyph: '' },\n  { label: '🧠 Recall Knowledge', shortform: 'SPECIAL_RECALL_KNOWLEDGE', skill: 'religion', actionCountGlyph: '1' },\n  { label: '📜 Decipher Writing', shortform: 'decipherWriting', skill: 'society', actionCountGlyph: '' },\n  { label: '🧠 Recall Knowledge', shortform: 'SPECIAL_RECALL_KNOWLEDGE', skill: 'society', actionCountGlyph: '1' },\n  { label: '😋 Subsist', shortform: 'subsist', skill: 'society', actionCountGlyph: '' },\n  { label: '🎁 Conceal an Object', shortform: 'concealAnObject', skill: 'stealth', actionCountGlyph: '1' },\n  { label: '🥷 Hide', shortform: 'hide', skill: 'stealth', actionCountGlyph: '1' },\n  { label: '👟 Sneak', shortform: 'sneak', skill: 'stealth', actionCountGlyph: '1' },\n  { label: '😋 Subsist', shortform: 'subsist', skill: 'survival', actionCountGlyph: '' },\n  { label: '🐾 Track', shortform: 'track', skill: 'survival', actionCountGlyph: '' },\n  { label: '🛠️ Disable Device', shortform: 'disableDevice', skill: 'thievery', actionCountGlyph: '2' },\n  { label: '🫳 Palm an Object', shortform: 'palmAnObject', skill: 'thievery', actionCountGlyph: '1' },\n  { label: '💸 Steal', shortform: 'steal', skill: 'thievery', actionCountGlyph: '1' },\n  { label: '🔓 Pick a Lock', shortform: 'pickALock', skill: 'thievery', actionCountGlyph: '2' },\n  { label: '🐶 Command an Animal', shortform: 'commandAnAnimal', skill: 'nature', actionCountGlyph: '1' },\n  { label: '🎭 Perform - acting', shortform: 'perform', skill: 'performance', actionCountGlyph: '1', variant: 'acting' },\n  { label: '🤣 Perform - comedy', shortform: 'perform', skill: 'performance', actionCountGlyph: '1', variant: 'comedy' },\n  { label: '💃 Perform - dance', shortform: 'perform', skill: 'performance', actionCountGlyph: '1', variant: 'dance' },\n  {\n    label: '🗣️ Perform - oratory',\n    shortform: 'perform',\n    skill: 'performance',\n    actionCountGlyph: '1',\n    variant: 'oratory',\n  },\n  {\n    label: '🎶 Perform - singing',\n    shortform: 'perform',\n    skill: 'performance',\n    actionCountGlyph: '1',\n    variant: 'singing',\n  },\n  {\n    label: '🎹 Perform - keyboards',\n    shortform: 'perform',\n    skill: 'performance',\n    actionCountGlyph: '1',\n    variant: 'keyboards',\n  },\n  {\n    label: '🥁 Perform - percussion',\n    shortform: 'perform',\n    skill: 'performance',\n    actionCountGlyph: '1',\n    variant: 'percussion',\n  },\n  {\n    label: '🪕 Perform - strings',\n    shortform: 'perform',\n    skill: 'performance',\n    actionCountGlyph: '1',\n    variant: 'strings',\n  },\n  { label: '🎺 Perform - winds', shortform: 'perform', skill: 'performance', actionCountGlyph: '1', variant: 'winds' },\n]\nfor (const i in SKILL_ACTIONS) {\n  SKILL_ACTIONS[i].idx = i\n}\n// LEVEL_BASED_DC: Level -1 = 13, L0 = 14, L1 = 15, etc\nconst LEVEL_BASED_DC = [\n  13,\n  14,\n  15,\n  16,\n  18,\n  19,\n  20,\n  22,\n  23,\n  24,\n  26,\n  27,\n  28,\n  30,\n  31,\n  32,\n  34,\n  35,\n  36,\n  38,\n  39,\n  40,\n  42,\n  44,\n  46,\n  48,\n  50,\n]\nshowPostPf2eRollButtonDialog()",
  "ownership": {
    "default": 0,
    "holNdNHqtCzAbMAV": 3,
    "ZMxdSpEKesYc7gvn": 3
  },
  "flags": {
    "advanced-macros": {
      "runAsGM": false,
      "runForSpecificUser": ""
    },
    "core": {},
    "cf": null
  },
  "_stats": {
    "systemId": "pf2e",
    "systemVersion": "5.10.5",
    "coreVersion": "11.315",
    "createdTime": 1680987438957,
    "modifiedTime": 1702343866185,
    "lastModifiedBy": "v0RvORcwGexWLCjc"
  },
  "folder": "S2KSaNQJxdlRFkyr",
  "sort": 1300000,
  "_id": "BRWYDeJP6EYVnnxw",
  "_key": "!macros!BRWYDeJP6EYVnnxw"
}
