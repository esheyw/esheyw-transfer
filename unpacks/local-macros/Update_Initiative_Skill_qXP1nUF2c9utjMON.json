{
  "name": "Update Initiative Skill",
  "type": "script",
  "scope": "global",
  "author": "v0RvORcwGexWLCjc",
  "img": "Assets/icons/game-icons-net/whitebackground/skills.svg",
  "command": "//Check for one or more selected tokens:\nconst tokens = canvas.tokens.controlled;\nif (!tokens.length) {\n    const charToken = game.user.character?.getActiveTokens()[0];\n    if (!charToken) {\n        ui.notifications.warn(\"Please select at least one token or assign yourself a character.\");\n        return;\n    } else {\n        tokens.push(charToken);\n    }\n}\n\nfunction generateSkillOptions(actor) {\n    const currInit = actor.system.attributes.initiative.statistic;\n    let t = 'perception'==currInit?'yes':'no';\n\n    let out = `<option value=\"perception\" selected>${'perception'==currInit?\"<strong>\":\"\"}Perception${'perception'==currInit?\"</strong>\":\"\"}</option>\\n`;\n    const askills = Object.entries(actor.skills).sort();\n    \n    for (const [slug,object] of askills) {\n        out += `<option value=\"${slug}\">${slug==currInit?\"<strong>\":\"\"}${object.label}${slug==currInit?\"</strong>\":\"\"}</option>\\n`;\n    }\n\n    return out;\n}\n\nasync function setInitSkill(actor, skillname='perception') {\n    return await actor.update({\n        'system.attributes.initiative.statistic': skillname\n    });        \n}\nasync function submitCallback(html) {\n    let actor = fromUuidSync(html[0].querySelector('#tokenUUID').value).actor\n    let skill = html[0].querySelector('#init-skill').value;\n    return await actor.update({\n        'system.attributes.initiative.statistic': skill\n    });   \n}\nfor (const token of tokens) {\n    const dData = {\n      title: `Set Initiative Skill for ${token.name}`,\n      content: `\n        <form>\n          <div class=\"form-group\">\n            <select id=\"init-skill\" name=\"init-skill\">\n                ${generateSkillOptions(token.actor)}\n            </select>\n            <input type=\"hidden\" id=\"tokenUUID\" name=\"tokenUUID\" value=\"${token.document.uuid}\" />\n          </div>\n        </form>\n        `,\n      buttons: {\n        yes: {\n          icon: \"<i class='fas fa-check'></i>\",\n          label: `Apply Changes`,\n          callback:  submitCallback,\n        },\n        no: {\n          icon: \"<i class='fas fa-times'></i>\",\n          label: `Cancel Changes`\n        },\n      },\n      default: \"yes\", \n    }\n\n    const response = new Dialog(dData).render(true);\n}",
  "flags": {
    "advanced-macros": {
      "runAsGM": false,
      "runForSpecificUser": ""
    },
    "cf": null,
    "core": {}
  },
  "_stats": {
    "systemId": "pf2e",
    "systemVersion": "5.10.5",
    "coreVersion": "11.315",
    "createdTime": 1681952461930,
    "modifiedTime": 1702343866185,
    "lastModifiedBy": "v0RvORcwGexWLCjc"
  },
  "_id": "qXP1nUF2c9utjMON",
  "folder": "MUrlWbVP9uj79bSv",
  "sort": 2900000,
  "ownership": {
    "default": 0,
    "holNdNHqtCzAbMAV": 3,
    "717Xeq3czH96acPF": 3,
    "ZMxdSpEKesYc7gvn": 3
  },
  "_key": "!macros!qXP1nUF2c9utjMON"
}
