{
  "name": "import dialog test",
  "type": "script",
  "scope": "global",
  "_id": "2ygfkWDd0hPXpHtN",
  "author": "v0RvORcwGexWLCjc",
  "img": "icons/svg/dice-target.svg",
  "command": "const source = await fromUuid(\"Compendium.esheyw-transfer.local-pf2e-actors2.Folder.xIYGWw9XlSNngman\");\nconst sourcePack = game.packs.get(source.pack);\nconst folderContents = await sourcePack.getDocuments({\n  folder__in: source.contents.map((a) => a.folder),\n});\nconst worldParty = game.actors.getName('Testing Party');\nconst party = folderContents.find(a => a.type === 'party');\nconst members = folderContents.filter(a=> a !== party);\nconst worldMembers = [...worldParty.members];\nconst partyTimeDiff = worldParty._stats.modifiedTime - party._stats.modifiedTime;\nconst displayTime = (date) => new Date(date).toISOString().slice(0, 16).replace(\"T\", \" \") + \" UTC\";\nconst memberMap = members.concat(worldMembers)\n    .reduce((acc,curr) => {\n      let existing,currID;\n      //if backupMember\n      if (currID = curr.getFlag('world','backupPartyOriginalID')) {\n        //if corresponding worldMember\n        if (existing = acc.find(a=>a?.world?.id === currID)) {\n          existing.backup = curr;\n          existing.backupTime = displayTime(curr._stats.modifiedTime);\n          existing.worldNewer = existing.world._stats.modifiedTime > curr._stats.modifiedTime;\n        } else {\n          acc.push({\n            world: null,\n            worldTime: null,\n            backup: curr,\n            backupTime: displayTime(curr._stats.modifiedTime),\n            worldNewer: false\n          });\n        }        \n      } else { \n        if (existing = acc.find(a => a.backup?.getFlag('world','backupPartyOriginalID') === curr.id)) {\n          existing.world = curr;\n          existing.worldTime = displayTime(curr._stats.modifiedTime);\n          existing.worldNewer = existing.backup._stats.modifiedTime < curr._stats.modifiedTime;\n        } else {\n          acc.push({\n            world: curr,\n            worldTime: displayTime(curr._stats.modifiedTime),\n            backup: null,\n            backupTime: null,\n            worldNewer: true\n          });     \n        }   \n      }\n      return acc;\n    },[])\n    .sort((a,b) => {\n      if (a.backupTime && a.worldTime) {\n        if (b.backupTime && b.worldTime) return a.backup.name.localeCompare(b.backup.name);\n        return -1; //put all match entries above uniques\n      }\n      //sort by time, but backups on top\n      if (a.backupTime) return b.backupTime ? b.backupTime - a.backupTime : -1; \n      return b.worldTime - a.worldTime;\n    });\n\nfunction iSDRenderCallback(html) {\n  const modeToggle = html.querySelector('#create-new');\n  modeToggle.addEventListener('change', (ev) => {\n    console.warn(ev.currentTarget.closest('form').querySelector('div#conflict-options').classList.toggle('hide-group'))\n  })\n}\nasync function importSummaryDialog({memberMap, party, keepId, overwrite}={}) {\n  let template = `\n  <style>\n  .party-backup-utility {\n    \n  }\n  .party-backup-utility th.name {\n    width:35%\n  }\n  .party-backup-utility th.time {\n    width:15%\n  }\n  .party-backup-utility td.time.newer {\n    color: var(--adjusted-higher);\n  }\n  .party-backup-utility td.time:not(.newer){\n    color: var(--adjusted-lower)\n  }\n  .party-backup-utility label {\n    flex: 2;\n    line-height: var(--form-field-height);\n  }\n  .party-backup-utility div.hide-group {\n    display: none;\n  }\n  </style>\n  <h2>Import Summary for <strong>{{partyName}}</strong>:</h2>\n  <table>\n    <thead>\n      <tr>\n        <th class=\"name\">Backup Member</th>\n        <th class=\"time\">Last Modified</th>\n        <th class=\"name\">World Member</th>\n        <th class=\"time\">Last Modified</th>\n      </tr>\n    </thead>\n    <tbody>\n    {{#each memberMap as |row|}}\n      <tr>\n        <td class=\"name\">{{row.backup.name}}</td>\n        <td class=\"time{{#unless row.worldNewer}} newer{{/unless}}\">{{row.backupTime}}</td>\n        <td class=\"name\">{{row.world.name}}</td>\n        <td class=\"time{{#if row.worldNewer}} newer{{/if}}\">{{row.worldTime}}</td>\n      </tr>\n    {{/each}}\n    </tbody>\n  </table>\n  <form>\n    <div class=\"form-group\">\n      <div class=\"flexrow\">\n        <label for=\"keepId\">Party Import Mode:</label>\n        <div class=\"form-fields\">\n          <select id=\"create-new\" data-Dtype=\"Boolean\" name=\"create-new\">\n              <option value=\"false\" selected>Import Over Existing</option>\n              <option value=\"true\">Create New Party</option>\n            </select> \n        </div>\n      </div>\n    </div>\n    <div class=\"form-group\" id=\"conflict-options\">\n      <fieldset>\n        <legend>Conflict Options</legend>      \n        <div class=\"flexrow\">\n          <label for=\"backup-unique-import\">Import actors only found in the backup:</label>\n          <div class=\"form-fields\">          \n            <input type=\"checkbox\" id=\"backup-unique-import\" name=\"backup-unique-import\" checked>\n          </div>\n        </div>\n        <div class=\"flexrow\">\n          <label for=\"world-unique-import\">Delete actors only found in the world:</label>\n          <div class=\"form-fields\">\n            <input type=\"checkbox\" id=\"world-unique-delete\" name=\"world-unique-delete\">\n          </div>\n        </div>\n        <div class=\"flexrow\">\n          <label>Merge behaviour for actors found in both:</label>\n          <div class=\"form-fields\">\n            <select id=\"matches-import\" name=\"matches-import\">\n              <option value=\"ow\" selected>Overwrite If Newer</option>\n              <option value=\"owf\">Overwrite Always</option>\n              <option value=\"no\">Do Not Import</option>\n            </select>      \n          </div>\n        </div>\n      </fieldset>\n    </div>\n  </form>\n  `;\n  let templateData = {\n    partyName: party.name,\n    memberMap,\n  }\n  let content = (Handlebars.compile(template))(templateData);\n\n  return await Dialog.wait({\n    title: `Party Import Summary`,\n    content,\n    close: () => false,    \n    buttons: {\n      confirm: {\n        label: `Import`,\n        icon: `<i class=\"fa-solid fa-file-import\"></i>`,\n        callback: html => new FormDataExtended(html.querySelector(\"form\")).object,\n      },\n      cancel: {\n        label: `Cancel`,\n        icon: `<i class=\"fa-solid fa-times\"></i>`,\n        callback: () => false\n      }\n    },\n    default: 'confirm',\n    render: iSDRenderCallback\n  }, {\n      width: 600,\n      jQuery:false,\n      classes: [\"party-backup-utility\"]\n    });\n}\nconsole.warn(await importSummaryDialog({memberMap, party}))",
  "folder": "S2KSaNQJxdlRFkyr",
  "flags": {
    "core": {}
  },
  "_stats": {
    "systemId": "pf2e",
    "systemVersion": "5.10.5",
    "coreVersion": "11.315",
    "createdTime": 1701811227647,
    "modifiedTime": 1702343866245,
    "lastModifiedBy": "v0RvORcwGexWLCjc"
  },
  "sort": 0,
  "ownership": {
    "default": 0,
    "v0RvORcwGexWLCjc": 3
  },
  "_key": "!macros!2ygfkWDd0hPXpHtN"
}
